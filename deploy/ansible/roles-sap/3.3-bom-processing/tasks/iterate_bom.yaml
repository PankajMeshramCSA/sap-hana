---
# Assumptions
#   target_media_location exists on disk
#
# Inputs:
#   target_media_location             Default     /usr/sap/install
#   inventory_dir
#   bom_iterator
#   sapbits_location_base_path
#   sapbits_bom_files
#   sapbits_sas_token
#
# Locals:
#   bom
#   item
#   result
#
# BOM Fields:
#   download
#   archive
#   permissions
#   




# Register BOM
- name:         "Register BOM: {{ bom_iterator }}"
  include_vars:
    file:       "{{ inventory_dir }}/{{ bom_iterator }}.yaml"
    name:       bom

#------------------<DEBUGGING>-------------------
# - debug:  
#     msg:      "Archive: {{ item.archive }}"
#   loop:       "{{ bom.materials.media|flatten(levels=1) }}"
#------------------</DEBUGGING>------------------

# Create download Directories
# Create BOM Directories


# Download Files
#------------------<DEBUGGING>-------------------
# - debug:  
#     msg:      
#       - "URL : {{ sapbits_location_base_path }}/{{ sapbits_bom_files }}/archives/{{ item.archive }}{% if sapbits_sas_token is not undefined %}{{ sapbits_sas_token }}{% endif %}"
#       - "DEST: {{ target_media_location }}/{% if item.filename is undefined %}{{ item.archive }}{% else %}{{ item.filename }}{% endif %}"
#       - "MODE: {% if item.permissions is undefined %}0644{% else %}{{ item.permissions }}{% endif %}"
#   loop:       "{{ bom.materials.media|flatten(levels=1) }}"
#------------------</DEBUGGING>------------------


- name: "BOM: Download Files"
  get_url:
    url:    "{{ sapbits_location_base_path }}/{{ sapbits_bom_files }}/archives/{{ item.archive }}{% if sapbits_sas_token is not undefined %}{{ sapbits_sas_token }}{% endif %}"
    dest:   "{{ target_media_location }}/{% if item.filename is undefined %}{{ item.archive }}{% else %}{{ item.filename }}{% endif %}"
    mode:   "{% if item.permissions is undefined %}0644{% else %}{{ item.permissions }}{% endif %}"

  register: result
  until:    result is succeeded
  retries:  10
  delay:    6
  loop:     "{{ bom.materials.media|flatten(levels=1) }}"
  when:     item.download is undefined or
            item.download


# extract files SAPCAR
# extract files unzip
# extract files unrar

# Remove BOM from Ansible Controller
# - name: "Ensure {{ bom_iterator }} is absent"
#   file:
#     path: "{{ inventory_dir }}/{{ bom_iterator }}_bom.yaml"
#     state: absent
#   delegate_to: localhost

# -------------------------------------+---------------------------------------8


# /*---------------------------------------------------------------------------8
# |                                   END                                      |
# +------------------------------------4--------------------------------------*/







# - name: "Ensure {{ bom_base_name }} is used"
#   include_vars:
#     file: "{{ inventory_dir }}/{{ bom_base_name }}.yaml"
#     name: bom
#   delegate_to: localhost

# - name: "Ensure {{ bom_base_name }} is absent"
#   file:
#     path: "{{ inventory_dir }}/{{ bom_base_name }}_bom.yaml"
#     state: absent
#   delegate_to: localhost

# - name:         "Ensure {{ target_media_location }} exists"
#   file:
#     path:       "{{ target_media_location }}"
#     state:      directory
#   check_mode:   "{{ test_mode is defined and test_mode }}"

# - name:               "Ensure current property is iterated"
#   include_tasks:      download_media.yaml
#   vars:
#     default_location: "{{ bom.defaults.target_location | regex_replace('/$', '') }}"
#     bom_media:        "{{ media_iterator.media }}"
#     source_location:  "{{ media_iterator.uri_location }}"
#     file_name:        "{{ media_iterator.property_name }}"
#   loop:
#     - uri_location:   archives
#       property_name:  archive
#       media:          "{{ bom.materials.media | flatten(levels=1) }}"
#     # - uri_location:   "boms/{{ bom_base_name }}/stackfiles"
#     #   property_name:  file
#     #   media:          "{{ bom.materials.stackfiles | flatten(levels=1) }}"
#     # - uri_location:   "boms/{{ bom_base_name }}/templates"
#     #   property_name:  file
#     #   media:          "{{ bom.materials.templates if (bom.materials.templates | type_debug == 'list') else [] | flatten(levels=1) }}"
#   loop_control:
#     loop_var:         media_iterator

# - name:               "Ensure {{ bom_base_name }} dependencies are followed"
#   when:               bom_dependencies | length != 0
#   include_tasks:      "{{ iterator }}"
#   vars:
#     bom_dependencies: "{{ bom.materials.dependencies is defined | ternary(bom.materials.dependencies, []) }}"
#     bom_media:        "{{ bom.materials.media }}"
#     bom_base_name:    "{{ item.name }}"
#   loop:               "{{ bom_dependencies | flatten(levels=1) }}"

...
